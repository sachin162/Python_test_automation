{"name": "test_get_links", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of Microsoft Edge WebDriver only supports Microsoft Edge version 108\nCurrent browser version is 110.0.1587.69 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nStacktrace:\nBacktrace:\n\tMicrosoft::Applications::Events::EventProperties::SetProperty [0x00007FF6D54D91D2+14306]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D5460992+842866]\n\t(No symbol) [0x00007FF6D5111D90]\n\t(No symbol) [0x00007FF6D5143BBA]\n\t(No symbol) [0x00007FF6D513E895]\n\t(No symbol) [0x00007FF6D5139DCF]\n\t(No symbol) [0x00007FF6D517E027]\n\t(No symbol) [0x00007FF6D517D3BA]\n\t(No symbol) [0x00007FF6D5175B03]\n\t(No symbol) [0x00007FF6D51473B8]\n\t(No symbol) [0x00007FF6D514638E]\n\t(No symbol) [0x00007FF6D5147AE4]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D53AFE18+119032]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D539D4D6+42934]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D53A06EC+55756]\n\t(No symbol) [0x00007FF6D5217923]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D546844A+874282]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D546D544+895012]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D546D69C+895356]\n\tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D54767BE+932510]\n\tBaseThreadInitThunk [0x00007FFB72447614+20]\n\tRtlUserThreadStart [0x00007FFB72A026A1+33]", "trace": "request = <SubRequest 'Setup_Browser' for <Function test_get_links>>\n\n    @pytest.fixture()\n    def Setup_Browser(request):\n        #files_path = setup_report()\n        global driver\n        #browserName = request.config.getoption(\"browser\")\n        browserName = \"edge\"\n        if browserName == \"chrome\":\n            #getCurrentChromeVersion_DownloadDriver()\n            chrome_service_obj = Service(\n                \"C:\\\\Users\\\\sachin.kulkarni\\\\PycharmProjects\\\\Internet-Heruko-app-Test\\\\drivers\\\\110\\\\chromedriver.exe\")\n            driver = wd.Chrome(service=chrome_service_obj)\n    \n        elif browserName == \"firefox\":\n            firefox_service_obj = Service(\"C:\\\\Users\\\\sachin.kulkarni\\\\PycharmProjects\\\\UI_Test_Automation_Python\\\\Drivers\\\\eckodriver.exe\")\n            driver = wd.Firefox(service=firefox_service_obj)\n        else:\n            edge_service_obj = Service(\"C:\\\\Users\\\\sachin.kulkarni\\\\PycharmProjects\\\\UI_Test_Automation_Python\\\\Drivers\\\\msedgedriver.exe\")\n>           driver = wd.Edge(service=edge_service_obj)\n\nconftest.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Test_FrameWork\\venv\\lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:73: in __init__\n    super().__init__(\n..\\..\\Test_FrameWork\\venv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:106: in __init__\n    super().__init__(\n..\\..\\Test_FrameWork\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:288: in __init__\n    self.start_session(capabilities, browser_profile)\n..\\..\\Test_FrameWork\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:381: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n..\\..\\Test_FrameWork\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020774FDEB00>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Micr...4767BE+932510]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB72447614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFB72A026A1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of Microsoft Edge WebDriver only supports Microsoft Edge version 108\nE       Current browser version is 110.0.1587.69 with binary path C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tMicrosoft::Applications::Events::EventProperties::SetProperty [0x00007FF6D54D91D2+14306]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D5460992+842866]\nE       \t(No symbol) [0x00007FF6D5111D90]\nE       \t(No symbol) [0x00007FF6D5143BBA]\nE       \t(No symbol) [0x00007FF6D513E895]\nE       \t(No symbol) [0x00007FF6D5139DCF]\nE       \t(No symbol) [0x00007FF6D517E027]\nE       \t(No symbol) [0x00007FF6D517D3BA]\nE       \t(No symbol) [0x00007FF6D5175B03]\nE       \t(No symbol) [0x00007FF6D51473B8]\nE       \t(No symbol) [0x00007FF6D514638E]\nE       \t(No symbol) [0x00007FF6D5147AE4]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D53AFE18+119032]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D539D4D6+42934]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D53A06EC+55756]\nE       \t(No symbol) [0x00007FF6D5217923]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D546844A+874282]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D546D544+895012]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D546D69C+895356]\nE       \tMicrosoft::Applications::Events::EventProperty::EventProperty [0x00007FF6D54767BE+932510]\nE       \tBaseThreadInitThunk [0x00007FFB72447614+20]\nE       \tRtlUserThreadStart [0x00007FFB72A026A1+33]\n\n..\\..\\Test_FrameWork\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: SessionNotCreatedException"}, "start": 1678871973881, "stop": 1678871973881, "uuid": "2da1d490-75c2-4219-a8fc-7455ed110451", "historyId": "3edf1b4b8734f42373196e1f291eb786", "testCaseId": "96235d756a555e91d3fc6bdaeaf8452d", "fullName": "test_internet_heruko_Home.Test_Internet_Heruko_Landing#test_get_links", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('Setup_Browser')"}, {"name": "suite", "value": "test_internet_heruko_Home"}, {"name": "subSuite", "value": "Test_Internet_Heruko_Landing"}, {"name": "host", "value": "IN-3KbjRY0IfoGz"}, {"name": "thread", "value": "23136-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_internet_heruko_Home"}]}